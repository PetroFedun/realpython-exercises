# 1. Для каждого из следующих условных выражений предположите, какой
# результат будет получен при их обработке - True или False. Затем введите
# их в интерактивном окне, чтобы проверить свои ответы:

print(1 <= 1) # True
print(1 != 1) # False
print(1 != 2) # True
print("good" != "bad") # True
print("good" != "Good") # True
print(123 == "123") # False

# 2. Для каждого из следующих выражений заполните пустые места ( обозна­
# ченные_) соответствующим булевским оператором сравнения, чтобы
# выражение давало результат True:

print(3 < 4)
print(10 > 5)
print('jack' != 'jill')
print(42 != '42')

# 3. Определите, какой результат (True или False) будет получен при вы­
# числении следующих выражений. Введите их в интерактивном окне
# и проверьте свои ответы:

print((1 <= 1) and (1 != 1)) # False
print(not (1 != 2)) # False
print(("good" != "bad") or False) #True
print(("good" != "Good") and not (1 == 1)) # False

# 4. Добавьте круглые скобки там, где необходимо, чтобы каждое из следую­
# щих выражений давало результат True:

print (False == (not True))
print((True and False) == (True and False))
print(not True and "А" == "В") # Не шару як його тру зробити

# 5. Напишите программу, которая запрашивает у пользователя слово при
# помощи функции iпput() и сравнивает длину слова с числом 5. Про­
# грамма должна вывести один из следующих результатов н зависимости
# от длины пользовательского ввода:

number = int(input('Enter your number: '))

if number > 5:
    print('Input length greater than 5 characters')
elif number < 5:
    print('Input length is less than 5 characters')
else: 
    print('The length of the input is 5 characters')

# 6. Напишите программу, которая выводит сообщение "Я загадал(а) число
# от 1 до 10. Угадайте его". Получите число от пользователя при помощи
# функции iпput (). Если пользователь вводит число 3, программа должна
# вывести сообщение "Вы победили! ",а для любого другого ввода программа
# выводит сообщение "Вы проиграли".

unknown_number = input('I made up a number from 1 to 10 guess it: ')

if unknown_number ==  '3':
    print('You win!')  
else:
    print('You lost')

# 7. Используя команду break, напишите программу, которая многократно
# запрашивает у пользователя данные и завершается только тогда, когда
# пользователь введет "q" или "Q".
    
while True:
    date = input('Enter your date: ')
    if date == 'q' or date == 'Q':
        break

# 8. Используя команду continue, напишите программу, которая перебирает
# числа от 1 до 50 и выводит все числа, не кратные 3.

for n in range (1, 51):
    if n % 3 == 0:
        continue
    print(n)

# 9. Напишите программу, которая предлагает пользователю ввести целое
# число. Если пользователь ввел что-то другое, программа должна пере­
# хватить ошибку ValueError и вывести сообщение "Try again."
# Когда пользователь задаст целое число, программа должна вывести это
# число и завершить работу без сбоев.

while True:
    try:            
        number = int(input('Enter your number: '))
        if isinstance(number, (int)):
            break
    except ValueError:
        print('Try again')

# 10. Напишите программу, которая предлагает пользователю ввести строку
# и целое число n, а затем выводит символ с индексом n во введенной строке.
# Используйте механизм обработки ошибок для того, чтобы предотвратить
# аварийное завершение программы, если пользователь задаст что-то кроме
# целого числа или если индекс выходит за границы массива. Программа долж­
# на выводить разные сообщения об ошибках в зависимости от типа ошибки.

try:
    s = input('Enter your string: ')
    n = int(input('Enter your index: '))
    print(s[n])
except IndexError:
    print('The index is ivalid')
except ValueError:
    print('The index must be a number')

# 11. Напишите функцию roll( ), которая использует randint() для модели­
# рования броска симметричного кубика, возвращающего случайное целое
# число от 1 до 6.

import random
def roll():
    roll = random.randint(1,6)
    return roll

print(roll())

# 12. Напишите программу, которая моделирует 10 ООО бросков игрального
# кубика и выводит среднее значение из тех, что выпали.

c = 0
n = 10_000
for r in range(n):
    c = c + random.randint(1,6)
    print(c / n)
